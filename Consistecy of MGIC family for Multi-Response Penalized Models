library(MASS)
library(Matrix)
library(mvtnorm)
library(grpreg)
#######
############
multi_data=function(n,p,p_real1,p_real2,roh,rho,
beta_real1,beta_real2){
# n Number of observations
# p Number of predictors included in model
real_n=n
#####
beta1=rep(beta_real1,p_real1);beta01=rep(0,p-p_real1)
beta11=c(beta1,beta01)
#######
beta2=rep(beta_real2,p_real2);beta02=rep(0,p-p_real2)
beta22=c(beta2,beta02);beta=cbind(beta11,beta22)
######
CovMatrix <- outer(1:p, 1:p, function(x,y) {roh^abs(x-y)})
x <- mvrnorm(real_n, rep(0,p), CovMatrix)
sig=matrix(c(16,rho*4*5,rho*4*5,25),2,2)
y <- x%*%beta + mvrnorm(real_n, rep(0,2), sig)

result <- list("y"=y,"x"=x,"beta"=beta)
return(result)
}
##############
beta_r=function(beta,p){
qq=0
for(i in 1:p){
if(abs(beta[i])<=0){
qq=qq+1
}
}
o=p-qq
return(o)
}
########
convrate=function(n,p,alpha,roh,rho,seed){
t1=proc.time()
set.seed(seed)
p_real1=5;p_real2=10;beta_real1=3;beta_real2=4
set.seed(seed)
Dat=multi_data(n,p,p_real1,p_real2,roh,rho,beta_real1,beta_real2)
B=Dat$beta
lamagic=lamagic2=lamagic3=lamagic4=0
####
g=seq(200,n,by=200)
K=length(g)
for(ia in 1:K){
GD=Dat
x <- as.matrix(GD$x)[1:g[ia],]
x=scale(x,scale=FALSE)
p=ncol(x)
y <- as.matrix(GD$y)[1:g[ia],]
y<-scale(y,scale=FALSE)
#select lambda
q=seq(0.0001,1,length=10000)
rp=length(q);dp=rep(0,rp);dp1=rep(0,rp);dp2=rep(0,rp)
dalpha=rep(0,rp)
agic=0;agic2=0;agic3=0;agic4=0;sigma=0;sigma1=0
n=length(y[,1])
for(i in 1:rp){
fit.l<-gBridge(x,y,group=1:ncol(x),lambda=q[i],family
=c("gaussian"),alpha=alpha)
yh= predict(fit.l,x)
f1=t(coef(fit.l))[-1,]
dp1[i]=beta_r(f1[,1],p)
dp2[i]=beta_r(f1[,2],p)	
dp[i]=(dp1[i]+dp2[i])
sigma[i]=abs(det(var(yh-y)))
sigma1[i]=sum((yh-y)^2)/n
agic[i]=log(sigma1[i])+(2*sigma1[i]*dp[i]/n)#AIC
agic2[i]=log(sigma[i])+(log(n)*dp[i]/n)#MBIC1
agic3[i]=log(sigma[i])+((n^(1/3))*dp[i]/n)#MBIC	2
agic4[i]=log(sigma1[i])+(2*dp[i]/n)#MAGIC
}
lamagic[ia]=q[which.min(agic)]
lamagic2[ia]=q[which.min(agic2)]
lamagic3[ia]=q[which.min(agic3)]
lamagic4[ia]=q[which.min(agic4)]	
#print(ia)
}
beta1=beta2=beta3=beta4=list(0)
for(ia in 1:K){
GD=Dat
x <- as.matrix(GD$x)[1:g[ia],]
x=scale(x,scale=FALSE)
p=ncol(x)
y <- as.matrix(GD$y)[1:g[ia],]
beta1[[ia]]=t(coef(gBridge(x,y,group=1:ncol(x),lambda=
lamagic[ia],family=c("gaussian"),alpha=alpha)))[-1,]
beta1[[ia]][abs(beta1[[ia]])<0.1]=0
beta2[[ia]]=t(coef(gBridge(x,y,group=1:ncol(x),lambda=
lamagic2[ia],family=c("gaussian"),alpha=alpha)))[-1,]
beta2[[ia]][abs(beta2[[ia]])<0.1]=0
beta3[[ia]]=t(coef(gBridge(x,y,group=1:ncol(x),lambda=
lamagic3[ia],family=c("gaussian"),alpha=alpha)))[-1,]
beta3[[ia]][abs(beta3[[ia]])<0.1]=0
beta4[[ia]]=t(coef(gBridge(x,y,group=1:ncol(x),lambda=
lamagic4[ia],family=c("gaussian"),alpha=alpha)))[-1,]
beta4[[ia]][abs(beta4[[ia]])<0.1]=0
#print(ia)
}
lc1=lc2=lc3=lc4=0
for(i in 1:K){
lc1[i]= sum((beta1[[i]]-B)^2)/length(B)
lc2[i]= sum((beta2[[i]]-B)^2)/length(B)
lc3[i]= sum((beta3[[i]]-B)^2)/length(B)
lc4[i]= sum((beta4[[i]]-B)^2)/length(B)
}
L=cbind(lc1,lc2,lc3,lc4)
t2=proc.time()
return(list("L"=L,"t"=t2-t1))
}
####
####################run
###
alpha1=0.25:alpha2=0.5;alpha3=0.75;alpha4=1
itr=25;n=10000;p=40;rho1=0.25;roh1=0.25;roh2=0.5
roh3=0.75;seed=13710
##########
############################run
##-Condition-1########rohx=0.25,alhpa=0.25
CRL2525=list(0)
for(i in 1:itr){
CRL2525[[i]]=convrate(n,p,alpha1,roh1,rho1,(seed+i))
print(i)
}
##########
############################run
##-Condition-2########rohx=0.50,alhpa=0.25
CRL5025=list(0)
for(i in 1:itr){
CRL5025[[i]]=convrate(n,p,alpha1,roh2,rho1,(seed+i))
}
##########
############################run
##-Condition-3########rohx=0.75,alhpa=0.25
CRL7525=list(0)
for(i in 1:itr){
CRL7525[[i]]=convrate(n,p,alpha1,roh3,rho1,(seed+i))
}
##########
############################run
##-Condition-4########rohx=0.25,alhpa=0.5
CRL2550=list(0)
for(i in 1:itr){
CRL2550[[i]]=convrate(n,p,alpha2,roh1,rho1,(seed+i))
}
##########
############################run
##-Condition-5########rohx=0.50,alhpa=0.5
CRL5050=list(0)
for(i in 1:itr){
CRL5050[[i]]=convrate(n,p,alpha2,roh2,rho1,(seed+i))
}
##########
############################run
##-Condition-6########rohx=0.75,alhpa=0.5
CRL7550=list(0)
for(i in 1:itr){
CRL7550[[i]]=convrate(n,p,alpha2,roh3,rho1,(seed+i))
}
##########
############################run
##-Condition-7########rohx=0.25,alhpa=0.75
CRL2575=list(0)
for(i in 1:itr){
CRL2575[[i]]=convrate(n,p,alpha3,roh1,rho1,(seed+i))
}
##########
############################run
##-Condition-8########rohx=0.50,alhpa=0.75
CRL5075=list(0)
for(i in 1:itr){
CRL5075[[i]]=convrate(n,p,alpha3,roh2,rho1,(seed+i))
}
##########
############################run
##-Condition-9########rohx=0.75,alhpa=0.75
CRL7575=list(0)
for(i in 1:itr){
CRL7575[[i]]=convrate(n,p,alpha3,roh3,rho1,(seed+i))
}
##########
############################run
##-Condition-10########rohx=0.25,alhpa=1
CRL251=list(0)
for(i in 1:itr){
CRL251[[i]]=convrate(n,p,alpha4,roh1,rho1,(seed+i))
}
##########
############################run
##-Condition-11########rohx=0.50,alhpa=1
CRL501=list(0)
for(i in 1:itr){
CRL501[[i]]=convrate(n,p,alpha4,roh2,rho1,(seed+i))
}
##########
############################run
##-Condition-12########rohx=0.75,alhpa=1
CRL751=list(0)
for(i in 1:itr){
CRL751[[i]]=convrate(n,p,alpha4,roh3,rho1,(seed+i))
}
